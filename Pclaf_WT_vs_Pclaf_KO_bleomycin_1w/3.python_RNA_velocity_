##RNA velocity with Pclaf WT
import pandas as pd
import scanpy as sc
import numpy as np
from numpy import linalg as la
from scipy.sparse import issparse
import loompy
import anndata
import scvelo as scv
import cellrank as cr
scv.logging.print_version()

scv.settings.verbosity = 3  # show errors(0), warnings(1), info(2), hints(3)
scv.settings.presenter_view = True  # set max width size for presenter view
scv.settings.set_figure_params('scvelo', dpi_save=300)  # for beautified visualization

#read data for cell type information
adata2 = sc.read('WT.h5ad')
adata2

adata2.obs['cell_type'] = adata2.obs['cell_type'].astype('category')
new_cluster_names = ['AT1','TrAT1','Krt8',
                    'AT2', 'AT2_2', 'PPC']
adata2.obs['cell_type'] = adata2.obs['cell_type'].cat.rename_categories(new_cluster_names)
adata2.obs['cell_type'] = adata2.obs['cell_type'].astype('category')
ldata = adata2.copy()

#read loom file
adata = scv.read('/Users/bkim6/Desktop/LAB/Seq/pyhon/2nd_analysis/Paf_WT_0HXKQ.loom', cache=True)
adata = scv.utils.merge(adata, ldata)
adata

#Velocity
scv.pp.filter_and_normalize(adata, min_shared_counts=10, n_top_genes=2000)
scv.pp.moments(adata, n_pcs=30, n_neighbors=30)
scv.pp.log1p(adata)
scv.tl.recover_dynamics(adata)

scv.tl.velocity(adata,mode = 'dynamical')
scv.tl.velocity_graph(adata)

scv.pl.velocity_embedding_stream(adata, dpi=300, basis = "umap", color ="cell_type", legend_loc='right margin', save = 'WT_seperated_pcs30_N30_20220226.svg')

scv.tl.latent_time(adata)

scv.pl.scatter(adata, dpi=300, color='latent_time', color_map='gnuplot', size=80,
              save = 'WT_latent_20220226.svg')
 
#PAGA graph
# this is needed due to a current bug - bugfix is coming soon.
adata.uns['neighbors']['distances'] = adata.obsp['distances']
adata.uns['neighbors']['connectivities'] = adata.obsp['connectivities']

scv.tl.paga(adata, groups='cell_type')
df = scv.get_df(adata, 'paga/transitions_confidence', precision=2).T
df.style.background_gradient(cmap='Blues').format('{:.2g}')

scv.pl.paga(adata, basis='umap', size=50, alpha=.1,
            min_edge_width=2, node_size_scale=1.5, dpi=300,
           save = 'WT_PAGA_seperated_pcs30_N50_20220212.svg')

##RNA velocity with Pclaf KO
import pandas as pd
import scanpy as sc
import numpy as np
from numpy import linalg as la
from scipy.sparse import issparse
import loompy
import anndata
import scvelo as scv
import cellrank as cr
scv.logging.print_version()

scv.settings.verbosity = 3  # show errors(0), warnings(1), info(2), hints(3)
scv.settings.presenter_view = True  # set max width size for presenter view
scv.settings.set_figure_params('scvelo', dpi_save=300)  # for beautified visualization


#read data for cell type information
adata2 = sc.read('KO.h5ad')
adata2

adata2.obs['cell_type'] = adata2.obs['cell_type'].astype('category')

new_cluster_names = ['AT1','TrAT1','Krt8',
                    'AT2', 'AT2_2', 'PPC']
adata2.rename_categories('cell_type', new_cluster_names)
adata2.obs['cell_type'] = adata2.obs['cell_type'].astype('category')

ldata = adata2.copy()

#read loom file
adata = scv.read('Paf_KO_H5B8V.loom', cache=True)
adata = scv.utils.merge(adata, ldata)


#Velocity
scv.pp.filter_and_normalize(adata, min_shared_counts=10, n_top_genes=2000)
scv.pp.moments(adata, n_pcs=30, n_neighbors=30)
scv.pp.log1p(adata)

scv.tl.recover_dynamics(adata)

scv.tl.velocity(adata,mode = 'dynamical')
scv.tl.velocity_graph(adata)

scv.tl.umap(adata)

scv.pl.velocity_embedding_stream(adata, dpi=300, basis = "umap", color ="cell_type", legend_loc='right margin', save = 'KO_seperated_pcs30_N30_20220226.svg')

scv.tl.latent_time(adata)

scv.pl.scatter(adata, dpi=300, color='latent_time', color_map='gnuplot', size=80,
              save = 'KO_latent_20220226.svg')
 

#PAGA graph
# this is needed due to a current bug - bugfix is coming soon.
adata.uns['neighbors']['distances'] = adata.obsp['distances']
adata.uns['neighbors']['connectivities'] = adata.obsp['connectivities']

scv.tl.paga(adata, groups='cell_type')
df = scv.get_df(adata, 'paga/transitions_confidence', precision=2).T
df.style.background_gradient(cmap='Blues').format('{:.2g}')

scv.pl.paga(adata, basis='umap', size=50, alpha=.1,
            min_edge_width=2, node_size_scale=1.5, dpi=300,
           save = 'KO_PAGA_seperated_pcs30_N50_20220212.svg')
